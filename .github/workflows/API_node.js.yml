name: API CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: --------- CHECKOUT DU CODE ---------
        uses: actions/checkout@v2

      - name: --------- CONFIGURATION DE NODE.JS ---------
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: --------- INSTALLATION DES DEPENDANCES ---------
        working-directory: API
        run: npm install

      - name: --------- DEMARRAGE DU SERVEUR ---------
        working-directory: API
        run: |
          # Démarrer le serveur en arrière-plan et capturer le PID
          nohup npm run dev > server.log 2>&1 &
          echo $! > server.pid
          sleep 5  # Attendre que le serveur démarre complètement

      - name: --------- EXECUTION DES TESTS ---------
        working-directory: API
        run: npm test

      - name: --------- ARRÊTER LE SERVEUR ---------
        if: always()
        run: |
          # Lire le PID depuis le fichier et arrêter le serveur
          if [ -f API/server.pid ]; then
            SERVER_PID=$(cat API/server.pid)
            echo "Arrêt du serveur avec PID $SERVER_PID"
            kill -9 $SERVER_PID || true
          else
            echo "Aucun PID trouvé pour le serveur"
          fi

      - name: --------- CONSTRUCTION DU PROJET ---------
        working-directory: API
        run: npm run build
        continue-on-error: true

  docker:
    needs: build
    runs-on: ubuntu-latest
  
    steps:
    - name: ------------ RECUPERATION DU CODE DU REPO ------------
      uses: actions/checkout@v4
  
    - name: ------------ CONNEXION À DOCKER HUB ------------
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
  
    - name: ------------ PULL DE L'IMAGE EXISTANTE (SI DISPONIBLE) ------------
      run: docker pull ${{ secrets.DOCKER_USERNAME }}/arosaje-api:latest || true
  
    - name: ------------ CONSTRUCTION DE L'IMAGE DOCKER AVEC CACHE ------------
      run: |
        docker build --cache-from=${{ secrets.DOCKER_USERNAME }}/arosaje-api:latest \
                      --tag ${{ secrets.DOCKER_USERNAME }}/arosaje-api:latest \
                      --tag ${{ secrets.DOCKER_USERNAME }}/arosaje-api:${{ github.sha }} \
                       .
      working-directory: API
  
    - name: ------------ PUSH DE L'IMAGE DOCKER (LATEST & SHA) ------------
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/arosaje-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/arosaje-api:${{ github.sha }}
